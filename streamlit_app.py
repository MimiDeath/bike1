import sys

import streamlit as st
import pandas as pd
from streamlit_option_menu import option_menu
from pathlib import Path
from apps import home, prediction
from rich.traceback import install
install(show_locals=True)
from rich.console import Console
console = Console()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤",
    page_icon="üö≤",
    layout="wide",
    initial_sidebar_state="expanded",
)

@st.cache_data
def load_data(file_path):
    df = pd.read_csv(file_path)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ —Ç–∏–ø—É –¥–∞—Ç—ã
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df = df.set_index("timestamp")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    df["month"] = df.index.month
    df['weekday'] = df.index.day_name()

    # –°—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int
    columns_to_convert = [
        'weather_code', 'is_holiday', 'is_weekend', 'season'
    ]
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ —Ç–∏–ø—É int
    df[columns_to_convert] = df[columns_to_convert].astype(int)

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–º–µ–Ω—ã —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ
    month_dict = {
        1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'June',
        7: 'July', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'
    }
    df['month'] = df['month'].map(month_dict)
    df[columns_to_convert] = df[columns_to_convert].astype(int)

    months = pd.get_dummies(df.month)
    months = months.astype(int)
    weekdays = pd.get_dummies(df.weekday)
    weekdays = weekdays.astype(int)

    df = pd.concat([df, months, weekdays], axis=1)

    df.drop(['month', 'weekday'], axis=1, inplace=True)

    int_columns = df.select_dtypes(include='int').columns

    df = df.resample('d').mean().sort_index()
    df = df.dropna()
    df[int_columns] = df[int_columns].astype(int)
    return df


class Menu:
    style = {
        "nav-link": {
            "font-family": "Monospace, Arial",
            "--hover-color": "SkyBlue",
        },
        "nav-link-selected": {
            "background-color": "rgb(10, 0, 124)",
            "font-family": "Monospace , Arial"
        },
    }
    apps = [
        {
            "func"  : home.app,
            "title" : "–ì–ª–∞–≤–Ω–∞—è",
            "icon"  : "house-fill"
        },
        {
            "func"  : prediction.app,
            "title" : "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "icon"  : "lightning-fill"
        },
    ]

    def run(self):
        with st.sidebar:
            titles = [app["title"] for app in self.apps]
            icons  = [app["icon"]  for app in self.apps]
            st.image('images/logo.bmp')

            selected = option_menu(
                "–ú–µ–Ω—é",
                options=titles,
                icons=icons,
                menu_icon="cast",
                styles=self.style,
                default_index=0,
            )

            st.info("""
                ## –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
                –≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ã—Ö –ø–æ–µ–∑–¥–∫–∞—Ö –≤ –õ–æ–Ω–¥–æ–Ω–µ.
                –û–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –±—É–¥—É—â–∏–π —Å–ø—Ä–æ—Å.
            """)
        return selected


if __name__ == '__main__':
    try:
        current_dir = Path(__file__).parent if "__file__" in locals() else Path.cwd()
        df = load_data(current_dir / 'london.csv')

        menu = Menu()
        selected = menu.run()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        st.sidebar.header('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–π–ª')
        uploaded_file = st.sidebar.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", type=["csv"])
        if uploaded_file is not None:
            df = pd.read_csv(uploaded_file)
        elif df is None:
            st.sidebar.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö.")

        for app in menu.apps:
            if app["title"] == selected:
                app["func"](df, current_dir)
                break

    except Exception as e:
        console.print_exception()
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.", icon="üö®")
        raise


